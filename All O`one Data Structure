432. All O`one Data Structure

class Node{
     public: 
        int count;
        unordered_set<string> keys;
        Node* prev, *next;
        Node(int c){
            count =c;
            prev= next = NULL;
        }
    };

class AllOne {
private:
    unordered_map<string , Node*> mp;
    Node* head, *tail;

    Node* addNodeAfter(Node *prev , int count){
        Node* newNode = new Node(count);
        newNode->next = prev->next;
        newNode->prev = prev;

        if(prev->next) newNode->next->prev= newNode;
        prev->next = newNode;
        if(tail == prev) tail = newNode;

        return newNode;
    }

    void removeNode(Node* node){
        node->prev->next = node->next;

        if(node->next) node->next->prev= node->prev;

        if(tail == node) tail  = node->prev;
        delete node;
    }

    public:
    AllOne() {
        head = new Node(0);
        tail = head;
    }
    
    void inc(string key) {
        if(mp.find(key)==mp.end()){
            if(head->next==NULL || head->next->count!= 1) 
                addNodeAfter(head,1);

            head->next->keys.insert(key);
            mp[key]= head->next;
        }else{
            Node* currNode= mp[key];
            int currCount= currNode->count;
            if(currNode->next == NULL || currNode->next->count!=currCount+1)
               addNodeAfter(currNode,currCount+1);

            currNode->next->keys.insert(key);
            mp[key] =  currNode->next;

            currNode->keys.erase(key);
            if( currNode->keys.empty()) removeNode(currNode);
        }
    }
    
    void dec(string key) {
        Node* currNode= mp[key];
        int currCount= currNode->count;

        if(currCount ==1) mp.erase(key);
        else {
            if(currNode->prev == head || currNode->prev->count !=currCount-1)
                   addNodeAfter(currNode->prev, currCount - 1);

            currNode->prev->keys.insert(key);
            mp[key] = currNode->prev;
        }
        currNode->keys.erase(key);
        if(currNode->keys.empty()) removeNode(currNode);
    }
    
    string getMaxKey() {
        return (tail ==head) ? "": *tail->keys.begin();
    }
    
    string getMinKey() {
      return (head->next == nullptr) ? "" : *head->next->keys.begin(); 
    }
};


