3219. Minimum Cost for Cutting Cake II

class Solution {
public:
    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {

        int x=horizontalCut.size();
        int y=verticalCut.size();

        sort( horizontalCut.begin(),  horizontalCut.end(), greater<int>());
        sort( verticalCut.begin(),  verticalCut.end(),greater<int>()); 

        int i =0, j=0;
        int horizontalPlaces=1;
        int verticalPlaces=1;

        long long result =0;
        
        while(i<x && j<y)
        {
            if(horizontalCut[i]>= verticalCut[j])
            {
                result+= horizontalCut[i]*verticalPlaces;
                horizontalPlaces++;
                i++;
            }else {
                result+= verticalCut[j]*horizontalPlaces;
                verticalPlaces++;
                j++;
            }
        }

        while(i<x)
        {
             result+= horizontalCut[i]*verticalPlaces;
                horizontalPlaces++;
                i++;
        }

        while(j<y)
        {
             result+= verticalCut[j]*horizontalPlaces;
                verticalPlaces++;
                j++;
        }

        return result; 
        }
    
};
   
