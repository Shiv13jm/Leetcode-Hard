Word Ladder
class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        unordered_set<string>WordSet(wordList.begin(), wordList.end());
        unordered_set<string> vis;
        queue<string> q;
        q.push(beginWord);
        vis.insert(beginWord);
        int level=1;

        while(!q.empty()){
            int n =q.size();

            while(n--){
                string curr= q.front();
                q.pop();

                if(curr== endWord) return level;
                for(int i=0; i<curr.size(); i++){
                    for(int k=0; k<26; k++){
                        string neighbour= curr;
                         neighbour[i]='a'+k;

                          if(vis.find(neighbour)==vis.end() && WordSet.find(neighbour)!=WordSet.end()){
                            q.push(neighbour);
                            vis.insert(neighbour);
                         }
                    }
                }
            }
            level++;
        }
        return 0;

    }
};
